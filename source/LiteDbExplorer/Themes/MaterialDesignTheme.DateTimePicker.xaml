<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes">

    <!--Based on: https://github.com/samoatesgames/mui.extended.toolkit/blob/master/ModernUI.Xceed/ModernUI.Xceed.Toolkit/Assets/Controls/DateTimePicker.xaml-->

    <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <DataTemplate x:Key="DefaultWatermarkTemplate">
        <ContentControl Content="{Binding}" Foreground="{DynamicResource ItemTextDisabled}" Focusable="False"
                        Margin="0,0,3,0" />
    </DataTemplate>

    <Style x:Key="DateTimePickerToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid SnapsToDevicePixels="True">
                        <xctk:ButtonChrome x:Name="ToggleButtonChrome"
                                           CornerRadius="0"
                                           Padding="0"
                                           BorderThickness="0"
                                           Background="Transparent"
                                           RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:DateTimePicker}}"
                                           RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:DateTimePicker}}"
                                           RenderMouseOver="{TemplateBinding IsMouseOver}"
                                           RenderPressed="{TemplateBinding IsPressed}">

                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                                <Grid x:Name="arrowGlyph" IsHitTestVisible="False" Grid.Column="1" Margin="5,0" Height="16">
                                    <Path x:Name="Arrow" Stretch="Uniform"
                                          Data="M19,19H5V8H19M16,1V3H8V1H6V3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3H18V1M17,12H12V17H17V12Z" 
                                          Fill="{TemplateBinding Foreground}" />
                                </Grid>
                            </Grid>
                        </xctk:ButtonChrome>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="ToggleButtonChrome" Value="{DynamicResource MaterialDesignFlatButtonClick}" />
                            <Setter Property="Background" TargetName="ToggleButtonChrome" Value="{DynamicResource MaterialDesignFlatButtonClick}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xctk:DateTimePicker}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="TimeWatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="Padding" Value="0,3,0,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DateTimePicker}">
                    <Border>
                        <Grid>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <xctk:ButtonSpinner x:Name="PART_Spinner"
                                                    Grid.Row="0" IsTabStop="False"
                                                    Background="{TemplateBinding Background}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    ButtonSpinnerLocation="{TemplateBinding ButtonSpinnerLocation}"
                                                    HorizontalContentAlignment="Stretch"
                                                    VerticalContentAlignment="Stretch"
                                                    AllowSpin="{TemplateBinding AllowSpin}"
                                                    ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
                                    <xctk:WatermarkTextBox x:Name="PART_TextBox"
                                                           BorderThickness="0"
                                                           Background="Transparent"
                                                           FontFamily="{TemplateBinding FontFamily}"
                                                           FontSize="{TemplateBinding FontSize}"
                                                           FontStretch="{TemplateBinding FontStretch}"
                                                           FontStyle="{TemplateBinding FontStyle}"
                                                           FontWeight="{TemplateBinding FontWeight}"
                                                           Foreground="{TemplateBinding Foreground}"
                                                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                           VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                           IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                                           IsTabStop="{TemplateBinding IsTabStop}"
                                                           MinWidth="20"
                                                           AcceptsReturn="False"
                                                           Padding="{TemplateBinding Padding}"
                                                           TextAlignment="{TemplateBinding TextAlignment}"
                                                           TextWrapping="NoWrap"
                                                           Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                                           TabIndex="{TemplateBinding TabIndex}"
                                                           Watermark="{TemplateBinding Watermark}"
                                                           WatermarkTemplate="{TemplateBinding WatermarkTemplate}">
                                        <xctk:WatermarkTextBox.ContextMenu>
                                            <ContextMenu>
                                                <MenuItem Command="Cut">
                                                    <MenuItem.Icon>
                                                        <materialDesign:PackIcon Kind="ContentCut"/>
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Command="Copy">
                                                    <MenuItem.Icon>
                                                        <materialDesign:PackIcon Kind="ContentCopy" />
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Command="Paste">
                                                    <MenuItem.Icon>
                                                        <materialDesign:PackIcon Kind="ContentPaste"/>
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                            </ContextMenu>
                                        </xctk:WatermarkTextBox.ContextMenu>
                                    </xctk:WatermarkTextBox>
                                </xctk:ButtonSpinner>
                                <ToggleButton x:Name="_calendarToggleButton"
                                              Grid.Row="0" Grid.Column="1"
                                              Background="Transparent"
                                              Focusable="False"
                                              Opacity="0.5"
                                              IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{StaticResource DateTimePickerToggleButtonStyle}"
                                              IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                              IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                                              Visibility="{TemplateBinding ShowDropDownButton, Converter={StaticResource BooleanToVisibilityConverter}}" />

                                <Border x:Name="textFieldBoxBottomLine"
                                        Background="{TemplateBinding BorderBrush}"
                                        Height="1" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2"
                                        Margin="0"
                                        HorizontalAlignment="Stretch"
                                        SnapsToDevicePixels="True" />
                                <materialDesign:Underline x:Name="Underline"
                                                          Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2"
                                                          Visibility="Visible"
                                                          Margin="0,-1,0,0"
                                                          HorizontalAlignment="Stretch"
                                                          SnapsToDevicePixels="True" />
                            </Grid>
                            <Popup x:Name="PART_Popup"
                                   IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}"
                                   StaysOpen="False"
                                   ToolTip="{x:Static sys:String.Empty}">
                                <Popup.Resources>
                                    <Style TargetType="ToolTip">
                                        <Style.Triggers>
                                            <Trigger Property="Content"
                                                     Value="{x:Static sys:String.Empty}">
                                                <Setter Property="Visibility"
                                                        Value="Collapsed" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </Popup.Resources>
                                <Border BorderThickness="1" Background="{DynamicResource PopupBackground}"
                                        BorderBrush="{DynamicResource WindowBorder}" Padding="3">
                                    <StackPanel>
                                        <Calendar x:Name="PART_Calendar"
                                                  BorderThickness="0"
                                                  DisplayMode="{Binding CalendarDisplayMode, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <xctk:TimePicker x:Name="PART_TimeUpDown"
                                                         Background="{DynamicResource InputBackground}"
                                                         Foreground="{DynamicResource InputText}"
                                                         Format="{TemplateBinding TimeFormat}"
                                                         FormatString="{TemplateBinding TimeFormatString}"
                                                         Kind="{Binding Kind, RelativeSource={RelativeSource TemplatedParent}}"
                                                         Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
                                                         Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}"
                                                         Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}"
                                                         ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}"
                                                         IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                                         AllowSpin="{TemplateBinding TimePickerAllowSpin}"
                                                         ShowButtonSpinner="{TemplateBinding TimePickerShowButtonSpinner}"
                                                         Watermark="{TemplateBinding TimeWatermark}"
                                                         WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}"
                                                         Visibility="{TemplateBinding TimePickerVisibility}" />
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource InputBorderHover}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                                <Condition Binding="{Binding AllowTextInput, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsReadOnly"
                                    Value="True"
                                    TargetName="PART_TextBox" />
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}"
                                     Value="True">
                            <Setter Property="IsReadOnly"
                                    Value="True"
                                    TargetName="PART_TextBox" />
                        </DataTrigger>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_Spinner" Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="textFieldBoxBottomLine" Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                        </MultiTrigger>-->
                        <Trigger Property="IsMouseOver" Value="True" SourceName="PART_Spinner">
                            <Setter TargetName="textFieldBoxBottomLine" Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                            <Setter TargetName="_calendarToggleButton" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                            <Setter TargetName="_calendarToggleButton" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger SourceName="_calendarToggleButton" Property="IsMouseOver" Value="True">
                            <Setter TargetName="_calendarToggleButton" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                            <Setter TargetName="_calendarToggleButton" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger SourceName="_calendarToggleButton" Property="IsMouseDirectlyOver" Value="True">
                            <Setter TargetName="textFieldBoxBottomLine" Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Underline" Property="IsActive" Value="True"/>
                            <Setter TargetName="_calendarToggleButton" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                            <Setter TargetName="_calendarToggleButton" Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource InputBorder}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_TextBox" Property="FocusManager.FocusedElement"
                                    Value="{Binding ElementName=PART_TextBox}" />
                            <Setter TargetName="Underline" Property="IsActive" Value="True"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>